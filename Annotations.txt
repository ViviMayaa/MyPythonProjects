print()->function

len()(1-50) starts counting from 1, not 0, so when putin an array(0-49) use minus 1 inside:array[len()-1]

print(' '.join(map(str, variable_name))) -- printing list as string on screen

we pass the argument as a parameter: my_function(argument) -> def my_function(parameter)

Positional Argument : my_function(argument_position_one, argument_position_two)
Keyword Argument : my_function(parameter_name = argument_position_one, parameter_name = argument_position_two)

Docstring = returns an explanation for the function == def function(): """first line"""

List Comprehension = play_again = True if answer_play_again == 'Y' or answer_play_again == "YES" else False
Dictionary Comprehension =  {row.letter: row.code for (index, row) in nato_dict_frame.iterrows()}
letter,code
A,Alfa

All caps in global variable points that it would and should not be changed, such as PI = 3.1415. URL = "www...."

Pascal Case => CarBlueprint, snake_case

HigherOrderFunction = a function that calls another function: calculator(2,3,divide) -> def calculator (n1,n2, func) -> def divide

Slicing => piano_keys = [a,b,c,d] - wants only c,d,e => piano_keys = [2:5] [starts, stops(does not get included), step], -1 inverst the list [::-1]

Documents Paths ./ forward, ../ backwards -> if txt is further in the working folder,
use ./Project/talk.ppt to search inside, upwards(back) is ../report.doc
--with open('/Users/vivi_/OneDrive/Área de Trabalho/testing.txt', 'r') as doc:print(doc.read())--
as '../../Área de Trabalho/testing.txt

to search if a string exists inside another use if / in: result = [int(number) for number in number2 if number in number1]

to take words off a string use split: result = {word:len(word) for word in sentence.split() }
for word in sentence.split():
    print(word)

*args -> allows any number of positional arguments == def add(*args) -- add(5,2,3,5...)
**kwargs -> allows any number of positional arguments == def calc(**kwargs) -- calc(number1= 81, number2= 82 ...)

Dynamic Typing -> when you are able to change the values and type of variable, such as a = 10 to a = "hello"

Json(25 project) - similar to dictionaries and lists : write: json.dump() ,json.dumps(to print) read: json.load(), update: json.update()

API -Application Programming Interface, endpoint is the location (url) where you send your request

Slice: [start:stop], don't forget that stop is the total -1 (want all 11 data? Put 12 on stop)

Testing request post, @mock.patch(request.post) mock_data.return_value.status_code = 200 // mock_data.return_value.json.return_value = ""

lambda_processor -> lambda_function

Take key out of Dictionary: list(dictionary_name.keys())